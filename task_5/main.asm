TITLE MAIN				

.Model Small
.STACK 400h			

EXTRN MY_INT:FAR

.DATA
KEEP_CS DW 0 			; хранит сегмент замен€емого прерывани€
KEEP_IP DW 0 			; хранит смещение прерывани€	
int_counter DW 0		; счетчик ввызовов прерывания

.CODE
	mov ax,@data
	mov ds,ax

; 1Ch - прерывание от часов - генерируется автоматически операционной системой 18 раз в сек;
	MOV AH,35H		; 35h - функци€ сохранени€ указател€ прерывани€ (вектора)
	MOV AL,1CH		; тип прерывани€ 
	INT 21H
	MOV KEEP_IP,BX		; запоминание смещени€
	MOV KEEP_CS,ES		; и сегмента
;------------------------------------------------------------------------------------------



;для установки нового содержимого вектора прерывани€ используетс€ функци€ 25H прерывани€ 21H.
	PUSH DS			; сохрон€ем ds
	MOV DX,OFFSET MY_INT	; смещение дл€ процедуры обработки прерывани€ в DX
	MOV AX,SEG MY_INT	; сегментный адрес процедуры
	MOV DS,AX		; помещаем в DS
	MOV AH,25H		; функци€ установки содержимого вектора прерывани€
	MOV AL,1CH		; тип прерывани€ в AL
	INT 21H			; мен€ем прерывание 
	POP DS			; восстанавливаем DS
;------------------------------------------------------------------------------------------------

	mov bx, 0
	mov dl, 0 	; цвет символов
infinite:
	cmp bx,int_counter 		; проверяем, был ли вызов прерывания
	jg inc_color
	cmp int_counter, 15
	jg exit
	jmp infinite		;/бесконечный цикл
	
inc_color:
	inc dl
	inc int_counter
	jmp infinite

;ѕри завершении программы обработки прерывани€ необходимо восстановить старое содержимое вектора прерывани€.
exit:
	CLI
	PUSH DS
	MOV DX,KEEP_IP
	MOV AX,KEEP_CS
	MOV DS,AX
	MOV AH,25H
	MOV AL,1CH
	INT 21H;
	POP DS
	STI

	mov ax,4C00h		; выйти из программы
	int 21h

end



